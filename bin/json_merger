#!/usr/bin/env node
// vim: fdm=marker fmr={{{,}}}

var pgm = process.argv[1].replace(/.*\//, '');
var version = '1.2.0';

var fs = require('fs');
var json_merger = require('../json_merger.js');

// Command line options --------------------------------------------------- {{{

var options = {
	file: null,
	pretty: false,
	javascript: false,
	variables: {}
};

// }}}
// Print help ------------------------------------------------------------- {{{

function print_help() {

console.log(`Usage: ${pgm} <file> [OPTIONS]

Mandatory arguments to long options are mandatory for short options too.

  -p, --pretty            Prettify the output json
  -j, --javascript        Perserve JavaScript functions, regex, etc...
  -v, --variables         Send key=value list of variables
                            Usage -v key1=value1 -v key2=value2

  -h, --help              Show this help
  -v, --version           Show the version`);
}

// }}}
// Parse Arguments -------------------------------------------------------- {{{

function parse_argv(argv) {

	var r_keyValue = /^(.*?)=(.*?)$/;

	// Sanitize argv: ["hello=world"] => ["hello", "world"]
	argv = [].concat.apply([], process.argv.slice(2).map(function(val) {
		return val.match(/^(?:(.*?)=)?(.*?)$/).filter(function(v, k) {
			return k && v;
		});
	}));

	argv.push('--');

	outer: for (;;) {

		var a = argv.shift();
		switch (a) {
			case '-p': case '--pretty':
				options.pretty = true;
				break;
			case '-j': case '--javascript':
				options.javascript = true;
				break;
			case '-v': case '--variables':
				var match = argv.shift().match(r_keyValue);
				options.variables[match[1]] = match[1];
				break;
			case '-h': case '--help':
				print_help(); process.exit();
				break;
			case '-v': case '--version':
				console.log(`${pgm} version: ${version}`); process.exit();
				break;
			case '--':
				break outer;
			default:
				if (!options.file && fs.existsSync(a)) {
					options.file = a;
				}
				else {
					process.stderr.write(`${pgm}: unrecognized option '${a}'\n`);
					process.stderr.write(`Try '${pgm} --help' for more information.\n`);
					process.exit(1);
				}
				break;
		}
	}
}

// }}}
// Main ------------------------------------------------------------------- {{{

function main(argv) {
	argv = parse_argv(argv);

	if (!options.file) {
		process.stderr.write('Missing <file>\n');
		process.exit(1);
	}

	var output = json_merger.fromFile(options.file, {
		asText: options.pretty ? 'pretty' : true,
		javascript: options.javascript,
		variables: options.variables,
		scope: process.cwd()
	});

	console.log(output);
}

//  }}}

main(process.argv);
